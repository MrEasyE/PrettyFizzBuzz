{"version":3,"sources":["components/fizzBuzzTable.js","components/fizzBuzzContainer.js","App.js","serviceWorker.js","index.js"],"names":["FizzBuzzTable","props","resultList","results","map","res","className","class","key","number","result","FizzBuzzContainer","state","numbers","runFizzBuzz","num","numToFizzBuzz","this","totalNum","numberArray","i","checkFizzBuzz","push","counter","timer","setInterval","currentArray","setState","unshift","length","stop","console","log","clearInterval","Component","App","handleStart","e","FizzBuzzNumber","value","preventDefault","href","rel","target","name","onSubmit","type","placeholder","ref","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PA4BeA,G,MA1BO,SAAAC,GAElB,IAAIC,EAAaD,EAAME,QAEvB,GAAID,EAAY,CAGZ,IAAIC,EAAUD,EAAWE,KAAI,SAAAC,GAAG,OAAK,wBAAIC,UAAWD,EAAIE,MAAOC,IAAKH,EAAII,QAAQ,4BAAKJ,EAAII,QAAY,4BAAKJ,EAAIK,YAE9G,OACI,+BACI,+BACA,4BACI,sCACA,wCAIJ,+BACKP,OC8DNQ,E,YA5EX,WAAYV,GAAO,IAAD,8BAEd,4CAAMA,KAuDVW,MAAQ,CACJC,QAAS,IAtDT,EAAKC,cAJS,E,2EAQJC,GACV,OAAGA,EAAM,IAAM,GAAKA,EAAM,IAAM,EACrB,WACCA,EAAM,IAAM,EACb,OACAA,EAAM,IAAM,EACZ,OAEAA,I,oCASX,IALW,IAAD,OACJC,EAAgBC,KAAKhB,MAAMiB,SAC7BC,EAAc,GAGVC,EAAI,EAAGA,GAAKJ,EAAeI,IAAK,CAEpC,IAAIL,EAAMK,EACNf,EAAMY,KAAKI,cAAcD,GAE7BD,EAAYG,KAAK,CAACb,OAAQM,EAAKL,OAAQL,EAAKE,MAAOF,IAKvD,IAAIkB,EAAU,EACVC,EAAQC,aAAY,WACpB,IAAIC,EAAe,EAAKd,MAAMC,QAC9B,EAAKc,SAAS,CACVlB,OAAQiB,EAAaE,QAAQT,EAAYI,QAE7CA,IAGeJ,EAAYU,QACvBC,MAEL,KAGGA,EAAO,WACTC,QAAQC,IAAI,kBACZC,cAAcT,M,+BAWlB,OACI,6BACI,4CAAkBP,KAAKhB,MAAMiB,SAA7B,YAEID,KAAKhB,MAAMiB,SACT,kBAAC,EAAD,CAAef,QAASc,KAAKL,MAAMC,UACnC,iD,GAvEUqB,aC+FjBC,E,2MA3FbvB,MAAQ,CACNH,OAAQ,M,EAIV2B,YAAc,SAAAC,GACZ,IAAIC,EAAiB,EAAK7B,OAAO8B,MACjCF,EAAEG,iBAGC,EAAK5B,MAAMH,QAEZsB,QAAQC,IAAI,QACZ,EAAKL,SAAS,CACZlB,OAAQ,SAIVsB,QAAQC,IAAI,8BACZ,EAAKL,SAAS,CACZlB,OAAQ6B,M,wEAKL,IAAD,OACN,OACE,yBAAKhC,UAAU,OACb,4BAAQA,UAAU,cAEhB,wBAAIA,UAAU,SAAd,oBAGF,0BAAMA,UAAU,YACd,+LAG6B,IAC3B,uBACEmC,KAAK,0CACLC,IAAI,sBACJC,OAAO,UAHT,QAJF,KAgBA,0BAAMC,KAAK,WAAWC,SAAU5B,KAAKmB,aAEnC,2BACEQ,KAAK,cACLtC,UAAU,cACVwC,KAAK,SACLC,YAAY,uCACZC,IAAK,SAAAvC,GAAM,OAAI,EAAKA,OAASA,GAE7BwC,SACEhC,KAAKL,MAAMH,OACT,WACA,OAKN,4BAAQqC,KAAK,SAASxC,UAAU,eAG5BW,KAAKL,MAAMH,OACT,OACA,iBAQNQ,KAAKL,MAAMH,OACT,kBAAC,EAAD,CAAmBS,SAAUD,KAAKL,MAAMH,SACxC,qC,GArFIyB,aCMEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5cc45960.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FizzBuzzTable = props => {\r\n\r\n    let resultList = props.results;\r\n\r\n    if (resultList) {\r\n\r\n        // map out the number array/objects into a Table Row and pass to the table.\r\n        let results = resultList.map(res => (<tr className={res.class} key={res.number}><td>{res.number}</td><td>{res.result}</td></tr>));\r\n\r\n        return (\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Number</th>\r\n                    <th>Result</th>\r\n                </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {results}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FizzBuzzTable;","import React, { Component } from \"react\";\r\n\r\n// Compontents\r\nimport FizzBuzzTable from './fizzBuzzTable';\r\n\r\nclass FizzBuzzContainer extends Component {\r\n\r\n    constructor(props){\r\n        // need the props that were passed in (props.totalNum)\r\n        super(props);\r\n        // start the app\r\n        this.runFizzBuzz();\r\n    }\r\n\r\n    // fizz buzz checker.\r\n    checkFizzBuzz(num) {\r\n        if(num % 3 === 0 && num % 5 === 0) {\r\n            return 'FizzBuzz'\r\n        } else if ( num % 3 === 0) {\r\n            return 'Fizz'\r\n        } else if (num % 5 === 0) {\r\n            return 'Buzz'\r\n        } else {\r\n            return num;\r\n        }\r\n    }\r\n\r\n    runFizzBuzz() {\r\n        const numToFizzBuzz = this.props.totalNum;\r\n        let numberArray = [];\r\n\r\n        // check if it's a Fizz or Buzz and add to numberArray\r\n        for(let i = 1; i <= numToFizzBuzz; i++) {\r\n\r\n            let num = i;\r\n            let res = this.checkFizzBuzz(i);\r\n\r\n            numberArray.push({number: num, result: res, class: res})\r\n            \r\n        };\r\n\r\n        // interval timer to unshift into the array with 1 sec delay.\r\n        let counter = 0;\r\n        let timer = setInterval(()=> {\r\n            let currentArray = this.state.numbers;\r\n            this.setState({\r\n                number: currentArray.unshift(numberArray[counter])\r\n            });\r\n            counter++;\r\n\r\n            //stop the timer if we don't have a number to push.\r\n            if(counter === numberArray.length) {\r\n                stop();\r\n            }\r\n        }, 1000)\r\n\r\n        // stop the timer\r\n        const stop = () => {\r\n            console.log('Stopping Timer');\r\n            clearInterval(timer);\r\n        }\r\n\r\n    }\r\n\r\n    state = {\r\n        numbers: []\r\n    }\r\n\r\n    // Render call the table and render it.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>FizzBuzzing: {this.props.totalNum} numbers</h1>\r\n                {\r\n                    this.props.totalNum\r\n                    ? <FizzBuzzTable results={this.state.numbers}/>\r\n                    : <h1>Not starting</h1>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FizzBuzzContainer;","import React, { Component } from 'react';\nimport './App.css';\n\n// Components\nimport FizzBuzzContainer from './components/fizzBuzzContainer';\n\nclass App extends Component {\n\n  // intial state\n  state = {\n    number: null\n  }\n\n  // button handler to grab number for state\n  handleStart = e => {\n    let FizzBuzzNumber = this.number.value;\n    e.preventDefault();\n\n    // check if we already have a number\n    if(this.state.number) {\n      // kill the number if we do\n      console.log('Stop')\n      this.setState({\n        number: null\n      })\n    } else {\n      // set the number if we don't\n      console.log('Setting Number to FizzBuzz')\n      this.setState({\n        number: FizzBuzzNumber\n      });\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* So pretty */}\n          <h1 className=\"title\">Pretty FizzBuzz</h1> \n        </header>\n\n        <main className=\"App-body\">\n          <p>\n            Welcome to Pretty FizzBuzz. Please give us a number, any number and\n            we will play FizzBuzz for you. If you're unfamiliar with FizzBuzz,\n            you can learn all about it{\" \"}\n            <a\n              href=\"https://en.wikipedia.org/wiki/Fizz_buzz\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              here\n            </a>\n            .\n          </p>\n\n          {/* this is our form for collecting and submitting the number */}\n\n          <form name=\"numField\" onSubmit={this.handleStart}>\n\n            <input\n              name=\"numberInput\"\n              className=\"numberInput\"\n              type=\"number\"\n              placeholder=\"How many numbers are we FizzBuzzing?\"\n              ref={number => this.number = number} // set \"this.number to value in the input field. This is passed via e in handleSubmit\"\n              // disable the form if we're running a FizzBuzz\n              disabled={\n                this.state.number\n                ? \"disabled\"\n                : null\n              }\n            ></input>\n\n\n            <button type=\"submit\" className=\"startButton\">\n              {/* Change button text depending on context */}\n              {\n                this.state.number\n                ? 'Stop'\n                : 'FizzBuzz Me!'\n              }\n            </button>\n          </form>\n\n          {/* Display the FizBuzz Container once user submits a number */}\n\n          {\n            this.state.number\n            ? <FizzBuzzContainer totalNum={this.state.number} />\n            : <span></span>\n          }\n          \n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}